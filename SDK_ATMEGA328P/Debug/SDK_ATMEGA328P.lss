
SDK_ATMEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000472  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001529  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a20  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a3d  00000000  00000000  00002645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f9  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa1  00000000  00000000  00003799  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000423a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 39       	cpi	r26, 0x9E	; 158
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  8e:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with aknokledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
	if(value<0) lcd_i2c_data('-');
	for(i=j;i<5;i++)
		{
			lcd_i2c_data(48+str[i]);
		}
}
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	8e e4       	ldi	r24, 0x4E	; 78
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lcd_i2c_reset+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_i2c_reset+0x20>
 100:	00 00       	nop
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_i2c_reset+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_i2c_reset+0x38>
 118:	00 00       	nop
 11a:	84 e3       	ldi	r24, 0x34	; 52
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_i2c_reset+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_i2c_reset+0x50>
 130:	00 00       	nop
 132:	84 e3       	ldi	r24, 0x34	; 52
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_i2c_reset+0x62>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_i2c_reset+0x68>
 148:	00 00       	nop
 14a:	84 e2       	ldi	r24, 0x24	; 36
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_i2c_reset+0x7a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_i2c_reset+0x80>
 160:	00 00       	nop
 162:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 166:	08 95       	ret

00000168 <lcd_i2c_cmd>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	c8 2f       	mov	r28, r24
 16e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 172:	8e e4       	ldi	r24, 0x4E	; 78
 174:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 178:	dc 2f       	mov	r29, r28
 17a:	d0 7f       	andi	r29, 0xF0	; 240
 17c:	8d 2f       	mov	r24, r29
 17e:	8c 60       	ori	r24, 0x0C	; 12
 180:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 184:	8d 2f       	mov	r24, r29
 186:	88 60       	ori	r24, 0x08	; 8
 188:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	c8 9f       	mul	r28, r24
 190:	e0 01       	movw	r28, r0
 192:	11 24       	eor	r1, r1
 194:	8c 2f       	mov	r24, r28
 196:	8c 60       	ori	r24, 0x0C	; 12
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_i2c_cmd+0x42>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_i2c_cmd+0x48>
 1b0:	00 00       	nop
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_i2c_cmd+0x4e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_i2c_cmd+0x54>
 1bc:	00 00       	nop
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lcd_i2c_init>:
 1c4:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1cc:	8c e2       	ldi	r24, 0x2C	; 44
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1ea:	08 95       	ret

000001ec <lcd_i2c_data>:
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	c8 2f       	mov	r28, r24
 1f2:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1f6:	8e e4       	ldi	r24, 0x4E	; 78
 1f8:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1fc:	dc 2f       	mov	r29, r28
 1fe:	d0 7f       	andi	r29, 0xF0	; 240
 200:	8d 2f       	mov	r24, r29
 202:	8d 60       	ori	r24, 0x0D	; 13
 204:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 208:	8d 2f       	mov	r24, r29
 20a:	89 60       	ori	r24, 0x09	; 9
 20c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	c8 9f       	mul	r28, r24
 214:	e0 01       	movw	r28, r0
 216:	11 24       	eor	r1, r1
 218:	8c 2f       	mov	r24, r28
 21a:	8d 60       	ori	r24, 0x0D	; 13
 21c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 220:	8c 2f       	mov	r24, r28
 222:	89 60       	ori	r24, 0x09	; 9
 224:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 228:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 22c:	8f e3       	ldi	r24, 0x3F	; 63
 22e:	9f e1       	ldi	r25, 0x1F	; 31
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_i2c_data+0x44>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_i2c_data+0x4a>
 236:	00 00       	nop
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9f e1       	ldi	r25, 0x1F	; 31
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_i2c_data+0x50>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_i2c_data+0x56>
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <lcd_i2c_clr>:
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9f e1       	ldi	r25, 0x1F	; 31
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_i2c_clr+0xa>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_i2c_clr+0x10>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <lcd_i2c_write_string>:
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	8c 01       	movw	r16, r24
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <lcd_i2c_write_string+0x16>
 26e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_data>
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <lcd_i2c_write_string+0x10>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <lcd_i2c_desl>:
void lcd_i2c_desl(const char * text){
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	6c 01       	movw	r12, r24
	int pos=0;
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_i2c_data(48+str[i]);
		}
}
void lcd_i2c_desl(const char * text){
	int pos=0;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 2a4:	28 c0       	rjmp	.+80     	; 0x2f6 <lcd_i2c_desl+0x6c>
		if (pos==16){
 2a6:	c0 31       	cpi	r28, 0x10	; 16
 2a8:	d1 05       	cpc	r29, r1
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <lcd_i2c_desl+0x2a>
			lcd_i2c_cmd(0xC0);
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <lcd_i2c_desl+0x4c>
	}
		else if (pos==32){
 2b4:	c0 32       	cpi	r28, 0x20	; 32
 2b6:	d1 05       	cpc	r29, r1
 2b8:	71 f4       	brne	.+28     	; 0x2d6 <lcd_i2c_desl+0x4c>
			lcd_i2c_cmd(0x01); 
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9e e4       	ldi	r25, 0x4E	; 78
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_i2c_desl+0x3a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_i2c_desl+0x40>
 2ca:	00 00       	nop
			_delay_ms(5);
			lcd_i2c_cmd(0x80);
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
			pos=0;
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
	}

	lcd_i2c_data(text[i]);
 2d6:	f7 01       	movw	r30, r14
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_data>
 2de:	ff ef       	ldi	r31, 0xFF	; 255
 2e0:	2b ed       	ldi	r18, 0xDB	; 219
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	f1 50       	subi	r31, 0x01	; 1
 2e6:	20 40       	sbci	r18, 0x00	; 0
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <lcd_i2c_desl+0x5a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_i2c_desl+0x64>
 2ee:	00 00       	nop
	_delay_ms(120);
	pos++;
 2f0:	21 96       	adiw	r28, 0x01	; 1
		}
}
void lcd_i2c_desl(const char * text){
	int pos=0;
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	76 01       	movw	r14, r12
 2f8:	e0 0e       	add	r14, r16
 2fa:	f1 1e       	adc	r15, r17
 2fc:	f7 01       	movw	r30, r14
 2fe:	80 81       	ld	r24, Z
 300:	81 11       	cpse	r24, r1
 302:	d1 cf       	rjmp	.-94     	; 0x2a6 <lcd_i2c_desl+0x1c>
	_delay_ms(120);
	pos++;
		}
		return 0;	
	}
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	cf 90       	pop	r12
 314:	08 95       	ret

00000316 <LCD_Custom_Char>:

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
    unsigned char i;
    if(loc<8)
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	98 f4       	brcc	.+38     	; 0x346 <LCD_Custom_Char+0x30>
 320:	8b 01       	movw	r16, r22
    {
     lcd_i2c_cmd (0x40 + (loc*8));  /* Command 0x40 and onwards forces 
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 96       	adiw	r24, 0x08	; 8
 326:	88 0f       	add	r24, r24
 328:	88 0f       	add	r24, r24
 32a:	88 0f       	add	r24, r24
 32c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
                                       the device to point CGRAM address */
       for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	07 c0       	rjmp	.+14     	; 0x342 <LCD_Custom_Char+0x2c>
           lcd_i2c_data(msg[i]);      
 334:	f8 01       	movw	r30, r16
 336:	ec 0f       	add	r30, r28
 338:	f1 1d       	adc	r31, r1
 33a:	80 81       	ld	r24, Z
 33c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_data>
    unsigned char i;
    if(loc<8)
    {
     lcd_i2c_cmd (0x40 + (loc*8));  /* Command 0x40 and onwards forces 
                                       the device to point CGRAM address */
       for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */
 340:	cf 5f       	subi	r28, 0xFF	; 255
 342:	c8 30       	cpi	r28, 0x08	; 8
 344:	b8 f3       	brcs	.-18     	; 0x334 <LCD_Custom_Char+0x1e>
           lcd_i2c_data(msg[i]);      
    }   
}
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <led_on_off>:
#include <avr/io.h>
#include <avr/delay.h>
void led_on_off(void)
{
	
	for (int i=0;i <= 10;i++)
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	0f c0       	rjmp	.+30     	; 0x372 <led_on_off+0x24>
	{
		PORTB ^= 1 << PINB5;
 354:	95 b1       	in	r25, 0x05	; 5
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	89 27       	eor	r24, r25
 35a:	85 b9       	out	0x05, r24	; 5
 35c:	4f ef       	ldi	r20, 0xFF	; 255
 35e:	89 e6       	ldi	r24, 0x69	; 105
 360:	98 e1       	ldi	r25, 0x18	; 24
 362:	41 50       	subi	r20, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <led_on_off+0x14>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <led_on_off+0x1e>
 36c:	00 00       	nop
#include <avr/io.h>
#include <avr/delay.h>
void led_on_off(void)
{
	
	for (int i=0;i <= 10;i++)
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	2b 30       	cpi	r18, 0x0B	; 11
 374:	31 05       	cpc	r19, r1
 376:	74 f3       	brlt	.-36     	; 0x354 <led_on_off+0x6>
	{
		PORTB ^= 1 << PINB5;
		_delay_ms(500);
	}
 378:	08 95       	ret

0000037a <main>:
#include "ports.h"
#include "leds.h"
#include "i2c.h"
#include "lcd_i2c.h"
int main(void)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	68 97       	sbiw	r28, 0x18	; 24
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	init_ports();
 38e:	0e 94 31 02 	call	0x462	; 0x462 <init_ports>
	led_on_off();
 392:	0e 94 a7 01 	call	0x34e	; 0x34e <led_on_off>
	init_i2c();
 396:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 39a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_i2c_init>
	lcd_i2c_clr();
 39e:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	lcd_i2c_desl("Vives acentuando dia a dia mis defectos,resaltando lo que no me sale bien comparandome con todos Que debia ser como este y como aquel");
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_i2c_desl>
	lcd_i2c_clr();
 3aa:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	
	char i;
	
	unsigned char Character1[8] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };  /* Custom char set for alphanumeric LCD Module */
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	e0 e0       	ldi	r30, 0x00	; 0
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	de 01       	movw	r26, r28
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	8a 95       	dec	r24
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x3e>
	unsigned char Character2[8] = { 0x04, 0x02, 0x1E, 0x0F, 0x0F, 0x1E, 0x02, 0x04 };
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	e8 e0       	ldi	r30, 0x08	; 8
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	de 01       	movw	r26, r28
 3c8:	19 96       	adiw	r26, 0x09	; 9
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x50>
	unsigned char Character3[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 3d2:	8e 01       	movw	r16, r28
 3d4:	0f 5e       	subi	r16, 0xEF	; 239
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	f8 01       	movw	r30, r16
 3dc:	11 92       	st	Z+, r1
 3de:	8a 95       	dec	r24
 3e0:	e9 f7       	brne	.-6      	; 0x3dc <main+0x62>

	lcd_i2c_init();
 3e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_i2c_init>
	
	
	LCD_Custom_Char(0, Character1);  /* Build Character1 at position 0 */
 3e6:	be 01       	movw	r22, r28
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
 3f2:	be 01       	movw	r22, r28
 3f4:	67 5f       	subi	r22, 0xF7	; 247
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(2, Character3);
 3fe:	b8 01       	movw	r22, r16
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(3, Character3);
 406:	b8 01       	movw	r22, r16
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(4, Character3);
 40e:	b8 01       	movw	r22, r16
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(5, Character3);
 416:	b8 01       	movw	r22, r16
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(6, Character3);
 41e:	b8 01       	movw	r22, r16
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>
	LCD_Custom_Char(7, Character1);  /* Build Character6 at position 7 */
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	87 e0       	ldi	r24, 0x07	; 7
 42e:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Custom_Char>

	lcd_i2c_cmd(0x80);		/*cursor at home position */
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
	lcd_i2c_write_string("LOADING");
 43a:	86 e9       	ldi	r24, 0x96	; 150
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_write_string>
	lcd_i2c_cmd(0xC0);
 442:	80 ec       	ldi	r24, 0xC0	; 192
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
	
	for(i=0;i<8;i++)		/* function will send data 1 to 8 to lcd */
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	07 c0       	rjmp	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		lcd_i2c_data(i);		/* char at 'i'th position will display on lcd */
 44e:	81 2f       	mov	r24, r17
 450:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_data>
		lcd_i2c_data(' ');		/* space between each custom char. */
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_data>

	lcd_i2c_cmd(0x80);		/*cursor at home position */
	lcd_i2c_write_string("LOADING");
	lcd_i2c_cmd(0xC0);
	
	for(i=0;i<8;i++)		/* function will send data 1 to 8 to lcd */
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	18 30       	cpi	r17, 0x08	; 8
 45e:	b8 f3       	brcs	.-18     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 460:	ff cf       	rjmp	.-2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>

00000462 <init_ports>:
#include <avr/io.h>


void init_ports(void)
{
	DDRB = 0xFF;
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 466:	8a b1       	in	r24, 0x0a	; 10
 468:	8c 60       	ori	r24, 0x0C	; 12
 46a:	8a b9       	out	0x0a, r24	; 10
 46c:	08 95       	ret

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>

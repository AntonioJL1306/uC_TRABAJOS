
SDK_ATMEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000053c  000005b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000171e  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0c  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aca  00000000  00000000  000028b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c28  00000000  00000000  00003af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000471e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <main>
  8e:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with aknokledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
	if(value<0) lcd_i2c_data('-');
	for(i=j;i<5;i++)
		{
			lcd_i2c_data(48+str[i]);
		}
}
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	8e e4       	ldi	r24, 0x4E	; 78
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lcd_i2c_reset+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_i2c_reset+0x20>
 100:	00 00       	nop
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_i2c_reset+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_i2c_reset+0x38>
 118:	00 00       	nop
 11a:	84 e3       	ldi	r24, 0x34	; 52
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_i2c_reset+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_i2c_reset+0x50>
 130:	00 00       	nop
 132:	84 e3       	ldi	r24, 0x34	; 52
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_i2c_reset+0x62>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_i2c_reset+0x68>
 148:	00 00       	nop
 14a:	84 e2       	ldi	r24, 0x24	; 36
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_i2c_reset+0x7a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_i2c_reset+0x80>
 160:	00 00       	nop
 162:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 166:	08 95       	ret

00000168 <lcd_i2c_cmd>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	c8 2f       	mov	r28, r24
 16e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 172:	8e e4       	ldi	r24, 0x4E	; 78
 174:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 178:	dc 2f       	mov	r29, r28
 17a:	d0 7f       	andi	r29, 0xF0	; 240
 17c:	8d 2f       	mov	r24, r29
 17e:	8c 60       	ori	r24, 0x0C	; 12
 180:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 184:	8d 2f       	mov	r24, r29
 186:	88 60       	ori	r24, 0x08	; 8
 188:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	c8 9f       	mul	r28, r24
 190:	e0 01       	movw	r28, r0
 192:	11 24       	eor	r1, r1
 194:	8c 2f       	mov	r24, r28
 196:	8c 60       	ori	r24, 0x0C	; 12
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_i2c_cmd+0x42>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_i2c_cmd+0x48>
 1b0:	00 00       	nop
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_i2c_cmd+0x4e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_i2c_cmd+0x54>
 1bc:	00 00       	nop
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lcd_i2c_init>:
 1c4:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1cc:	8c e2       	ldi	r24, 0x2C	; 44
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1f0:	08 95       	ret

000001f2 <lcd_i2c_data>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	c8 2f       	mov	r28, r24
 1f8:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1fc:	8e e4       	ldi	r24, 0x4E	; 78
 1fe:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 202:	dc 2f       	mov	r29, r28
 204:	d0 7f       	andi	r29, 0xF0	; 240
 206:	8d 2f       	mov	r24, r29
 208:	8d 60       	ori	r24, 0x0D	; 13
 20a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 20e:	8d 2f       	mov	r24, r29
 210:	89 60       	ori	r24, 0x09	; 9
 212:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	c8 9f       	mul	r28, r24
 21a:	e0 01       	movw	r28, r0
 21c:	11 24       	eor	r1, r1
 21e:	8c 2f       	mov	r24, r28
 220:	8d 60       	ori	r24, 0x0D	; 13
 222:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 226:	8c 2f       	mov	r24, r28
 228:	89 60       	ori	r24, 0x09	; 9
 22a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 22e:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 232:	8f e3       	ldi	r24, 0x3F	; 63
 234:	9f e1       	ldi	r25, 0x1F	; 31
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_i2c_data+0x44>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_i2c_data+0x4a>
 23c:	00 00       	nop
 23e:	8f e3       	ldi	r24, 0x3F	; 63
 240:	9f e1       	ldi	r25, 0x1F	; 31
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_i2c_data+0x50>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_i2c_data+0x56>
 248:	00 00       	nop
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <lcd_i2c_clr>:
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 256:	8f e3       	ldi	r24, 0x3F	; 63
 258:	9f e1       	ldi	r25, 0x1F	; 31
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_i2c_clr+0xa>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_i2c_clr+0x10>
 260:	00 00       	nop
 262:	08 95       	ret

00000264 <lcd_i2c_write_string>:
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8c 01       	movw	r16, r24
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	03 c0       	rjmp	.+6      	; 0x27a <lcd_i2c_write_string+0x16>
 274:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_i2c_data>
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	f8 01       	movw	r30, r16
 27c:	ec 0f       	add	r30, r28
 27e:	fd 1f       	adc	r31, r29
 280:	80 81       	ld	r24, Z
 282:	81 11       	cpse	r24, r1
 284:	f7 cf       	rjmp	.-18     	; 0x274 <lcd_i2c_write_string+0x10>
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <lcd_i2c_desl>:
void lcd_i2c_desl(const char * text){
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	6c 01       	movw	r12, r24
	int pos=0;
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 2a2:	00 e0       	ldi	r16, 0x00	; 0
 2a4:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_i2c_data(48+str[i]);
		}
}
void lcd_i2c_desl(const char * text){
	int pos=0;
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 2aa:	2b c0       	rjmp	.+86     	; 0x302 <lcd_i2c_desl+0x72>
		if (pos==16){
 2ac:	c0 31       	cpi	r28, 0x10	; 16
 2ae:	d1 05       	cpc	r29, r1
 2b0:	21 f4       	brne	.+8      	; 0x2ba <lcd_i2c_desl+0x2a>
			lcd_i2c_cmd(0xC0);
 2b2:	80 ec       	ldi	r24, 0xC0	; 192
 2b4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <lcd_i2c_desl+0x52>
	}
		else if (pos==32){
 2ba:	c0 32       	cpi	r28, 0x20	; 32
 2bc:	d1 05       	cpc	r29, r1
 2be:	89 f4       	brne	.+34     	; 0x2e2 <lcd_i2c_desl+0x52>
			lcd_i2c_cmd(0x01); 
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	81 ee       	ldi	r24, 0xE1	; 225
 2ca:	94 e0       	ldi	r25, 0x04	; 4
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <lcd_i2c_desl+0x3c>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_i2c_desl+0x46>
 2d6:	00 00       	nop
			_delay_ms(100);
			lcd_i2c_cmd(0x80);
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
			pos=0;
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
	}

	lcd_i2c_data(text[i]);
 2e2:	f7 01       	movw	r30, r14
 2e4:	80 81       	ld	r24, Z
 2e6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_i2c_data>
 2ea:	ff ef       	ldi	r31, 0xFF	; 255
 2ec:	23 ec       	ldi	r18, 0xC3	; 195
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	f1 50       	subi	r31, 0x01	; 1
 2f2:	20 40       	sbci	r18, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <lcd_i2c_desl+0x60>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_i2c_desl+0x6a>
 2fa:	00 00       	nop
	_delay_ms(200);
	pos++;
 2fc:	21 96       	adiw	r28, 0x01	; 1
		}
}
void lcd_i2c_desl(const char * text){
	int pos=0;
	while (1){
	for (int i=0; text[i] !='\0'; i++){
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	76 01       	movw	r14, r12
 304:	e0 0e       	add	r14, r16
 306:	f1 1e       	adc	r15, r17
 308:	f7 01       	movw	r30, r14
 30a:	80 81       	ld	r24, Z
 30c:	81 11       	cpse	r24, r1
 30e:	ce cf       	rjmp	.-100    	; 0x2ac <lcd_i2c_desl+0x1c>
	_delay_ms(200);
	pos++;
		}
		return 0;	
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	08 95       	ret

00000322 <LCD_Custom_Char>:

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
    unsigned char i;
    if(loc<8)
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	98 f4       	brcc	.+38     	; 0x352 <LCD_Custom_Char+0x30>
 32c:	8b 01       	movw	r16, r22
    {
     lcd_i2c_cmd (0x40 + (loc*8));  /* Command 0x40 and onwards forces 
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 96       	adiw	r24, 0x08	; 8
 332:	88 0f       	add	r24, r24
 334:	88 0f       	add	r24, r24
 336:	88 0f       	add	r24, r24
 338:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
                                       the device to point CGRAM address */
       for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	07 c0       	rjmp	.+14     	; 0x34e <LCD_Custom_Char+0x2c>
           lcd_i2c_data(msg[i]);      
 340:	f8 01       	movw	r30, r16
 342:	ec 0f       	add	r30, r28
 344:	f1 1d       	adc	r31, r1
 346:	80 81       	ld	r24, Z
 348:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_i2c_data>
    unsigned char i;
    if(loc<8)
    {
     lcd_i2c_cmd (0x40 + (loc*8));  /* Command 0x40 and onwards forces 
                                       the device to point CGRAM address */
       for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */
 34c:	cf 5f       	subi	r28, 0xFF	; 255
 34e:	c8 30       	cpi	r28, 0x08	; 8
 350:	b8 f3       	brcs	.-18     	; 0x340 <LCD_Custom_Char+0x1e>
           lcd_i2c_data(msg[i]);      
    }   
}
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <LCD_clr>:
void LCD_clr(void)
{
	lcd_i2c_cmd(0x01); //clear LCD (0000 0001)
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	9c e9       	ldi	r25, 0x9C	; 156
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_clr+0xa>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_clr+0x10>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <lcd_i2c_movimiento_carcter>:
	_delay_ms(10);
}

void lcd_i2c_movimiento_carcter(void){
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	a8 97       	sbiw	r28, 0x28	; 40
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
	char i;
	unsigned char Character2[8] = { 0x04, 0x02, 0x1E, 0x0F, 0x0F, 0x1E, 0x02, 0x04 };
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	e0 e0       	ldi	r30, 0x00	; 0
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	de 01       	movw	r26, r28
 38e:	11 96       	adiw	r26, 0x01	; 1
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <lcd_i2c_movimiento_carcter+0x22>
	unsigned char Character1[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 398:	8e 01       	movw	r16, r28
 39a:	07 5f       	subi	r16, 0xF7	; 247
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	f8 01       	movw	r30, r16
 3a2:	11 92       	st	Z+, r1
 3a4:	8a 95       	dec	r24
 3a6:	e9 f7       	brne	.-6      	; 0x3a2 <lcd_i2c_movimiento_carcter+0x34>
	unsigned char Character3[8] = { 0x00, 0x00, 0x00, 0x04, 0x1F, 0x0E, 0x0E, 0x0A };
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	e8 e0       	ldi	r30, 0x08	; 8
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	de 01       	movw	r26, r28
 3b0:	51 96       	adiw	r26, 0x11	; 17
 3b2:	01 90       	ld	r0, Z+
 3b4:	0d 92       	st	X+, r0
 3b6:	8a 95       	dec	r24
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <lcd_i2c_movimiento_carcter+0x44>
	unsigned char Character4[8] = { 0x04, 0x08, 0x0F, 0x1E, 0x1E, 0x0F, 0x08, 0x04 };
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	e0 e1       	ldi	r30, 0x10	; 16
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	de 01       	movw	r26, r28
 3c2:	59 96       	adiw	r26, 0x19	; 25
 3c4:	01 90       	ld	r0, Z+
 3c6:	0d 92       	st	X+, r0
 3c8:	8a 95       	dec	r24
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <lcd_i2c_movimiento_carcter+0x56>
	unsigned char Character5[8] = { 0x0A, 0x0E, 0x0E, 0x1F, 0x04, 0x00, 0x00, 0x00 };
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	e8 e1       	ldi	r30, 0x18	; 24
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	de 01       	movw	r26, r28
 3d4:	91 96       	adiw	r26, 0x21	; 33
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <lcd_i2c_movimiento_carcter+0x68>
	LCD_Custom_Char(0, Character1);
 3de:	b8 01       	movw	r22, r16
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(1, Character1);
 3e6:	b8 01       	movw	r22, r16
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(2, Character1);
 3ee:	b8 01       	movw	r22, r16
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(3, Character2);
 3f6:	be 01       	movw	r22, r28
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
 402:	ff ef       	ldi	r31, 0xFF	; 255
 404:	27 ea       	ldi	r18, 0xA7	; 167
 406:	81 e6       	ldi	r24, 0x61	; 97
 408:	f1 50       	subi	r31, 0x01	; 1
 40a:	20 40       	sbci	r18, 0x00	; 0
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
	_delay_ms(2000);
	LCD_Custom_Char(3, Character3);
 414:	be 01       	movw	r22, r28
 416:	6f 5e       	subi	r22, 0xEF	; 239
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
 420:	9f ef       	ldi	r25, 0xFF	; 255
 422:	e7 ea       	ldi	r30, 0xA7	; 167
 424:	f1 e6       	ldi	r31, 0x61	; 97
 426:	91 50       	subi	r25, 0x01	; 1
 428:	e0 40       	sbci	r30, 0x00	; 0
 42a:	f0 40       	sbci	r31, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
	_delay_ms(2000);
	LCD_Custom_Char(3, Character4);
 432:	be 01       	movw	r22, r28
 434:	67 5e       	subi	r22, 0xE7	; 231
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	87 ea       	ldi	r24, 0xA7	; 167
 442:	91 e6       	ldi	r25, 0x61	; 97
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
	_delay_ms(2000);
	LCD_Custom_Char(3, Character5);
 450:	be 01       	movw	r22, r28
 452:	6f 5d       	subi	r22, 0xDF	; 223
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
 45c:	ef ef       	ldi	r30, 0xFF	; 255
 45e:	f7 ea       	ldi	r31, 0xA7	; 167
 460:	21 e6       	ldi	r18, 0x61	; 97
 462:	e1 50       	subi	r30, 0x01	; 1
 464:	f0 40       	sbci	r31, 0x00	; 0
 466:	20 40       	sbci	r18, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
	_delay_ms(2000);
	LCD_Custom_Char(4, Character1);
 46e:	b8 01       	movw	r22, r16
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(5, Character1);
 476:	b8 01       	movw	r22, r16
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(6, Character1);
 47e:	b8 01       	movw	r22, r16
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	LCD_Custom_Char(7, Character1);
 486:	b8 01       	movw	r22, r16
 488:	87 e0       	ldi	r24, 0x07	; 7
 48a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Custom_Char>
	lcd_i2c_cmd(0xC0);
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
	for (int i=0;i<8; i++){
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	08 c0       	rjmp	.+16     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		lcd_i2c_data(i);		/* char at 'i'th position will display on lcd */
 49a:	80 2f       	mov	r24, r16
 49c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_i2c_data>
		lcd_i2c_data(' ');		/* space between each custom char. */
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_i2c_data>
	LCD_Custom_Char(4, Character1);
	LCD_Custom_Char(5, Character1);
	LCD_Custom_Char(6, Character1);
	LCD_Custom_Char(7, Character1);
	lcd_i2c_cmd(0xC0);
	for (int i=0;i<8; i++){
 4a6:	0f 5f       	subi	r16, 0xFF	; 255
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	08 30       	cpi	r16, 0x08	; 8
 4ac:	11 05       	cpc	r17, r1
 4ae:	ac f3       	brlt	.-22     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
		lcd_i2c_data(i);		/* char at 'i'th position will display on lcd */
		lcd_i2c_data(' ');		/* space between each custom char. */
	}
	}
 4b0:	a8 96       	adiw	r28, 0x28	; 40
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <led_on_off>:
#include <avr/io.h>
#include <avr/delay.h>
void led_on_off(void)
{
	
	for (int i=0;i <= 10;i++)
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	0f c0       	rjmp	.+30     	; 0x4ea <led_on_off+0x24>
	{
		PORTB ^= 1 << PINB5;
 4cc:	95 b1       	in	r25, 0x05	; 5
 4ce:	80 e2       	ldi	r24, 0x20	; 32
 4d0:	89 27       	eor	r24, r25
 4d2:	85 b9       	out	0x05, r24	; 5
 4d4:	4f ef       	ldi	r20, 0xFF	; 255
 4d6:	89 e6       	ldi	r24, 0x69	; 105
 4d8:	98 e1       	ldi	r25, 0x18	; 24
 4da:	41 50       	subi	r20, 0x01	; 1
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <led_on_off+0x14>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <led_on_off+0x1e>
 4e4:	00 00       	nop
#include <avr/io.h>
#include <avr/delay.h>
void led_on_off(void)
{
	
	for (int i=0;i <= 10;i++)
 4e6:	2f 5f       	subi	r18, 0xFF	; 255
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	2b 30       	cpi	r18, 0x0B	; 11
 4ec:	31 05       	cpc	r19, r1
 4ee:	74 f3       	brlt	.-36     	; 0x4cc <led_on_off+0x6>
	{
		PORTB ^= 1 << PINB5;
		_delay_ms(500);
	}
 4f0:	08 95       	ret

000004f2 <main>:
#include "i2c.h"
#include "lcd_i2c.h"
int main(void)
{
	/* Replace with your application code */
	init_ports();
 4f2:	0e 94 96 02 	call	0x52c	; 0x52c <init_ports>
	led_on_off();
 4f6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <led_on_off>
	init_i2c();
 4fa:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 4fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_i2c_init>
	lcd_i2c_clr();
 502:	0e 94 28 01 	call	0x250	; 0x250 <lcd_i2c_clr>
	lcd_i2c_desl("NO TENGO NADA PINCHE GOBIERNO MALO");
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_i2c_desl>
	LCD_clr();
 50e:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_clr>
	lcd_i2c_init();
 512:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_i2c_init>
	lcd_i2c_cmd(0x80);
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
	lcd_i2c_write_string("LOADING...");
 51e:	83 e4       	ldi	r24, 0x43	; 67
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 32 01 	call	0x264	; 0x264 <lcd_i2c_write_string>
	while (1)
	{
		lcd_i2c_movimiento_carcter();
 526:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_i2c_movimiento_carcter>
 52a:	fd cf       	rjmp	.-6      	; 0x526 <main+0x34>

0000052c <init_ports>:
#include <avr/io.h>


void init_ports(void)
{
	DDRB = 0xFF;
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 530:	8a b1       	in	r24, 0x0a	; 10
 532:	8c 60       	ori	r24, 0x0C	; 12
 534:	8a b9       	out	0x0a, r24	; 10
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
